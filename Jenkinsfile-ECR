@Library('my-shared-library') _

pipeline {

    agent any

    parameters{
        
        choice(name: 'action', choices: 'create\ndelete', description: 'choose create/destroy')
        string(name: 'aws_account_id', description: "id of the aws account", defaultValue: "102625571222")
        string(name: 'region', description: "region of the account", defaultValue: "ap-south-1")
        string(name: 'ecr_repo_name', description: "name of the ecr repo", defaultValue: "akhil")
        string(name: 'cluster', description: "name of the eks cluster", defaultValue: "demo-cluster1")
    }

    environment{

        ACCESS_KEY = credentials('AWS_ACCESS_KEY')
        SECRET_KEY = credentials('AWS_SECRET_KEY')
    }

    stages {

        stage('git checkout'){

            when { expression {  params.action == 'create' } }

            steps {

                script {

                    gitCheckout(

                        branch: "master",
                        url: "https://github.com/rookie1025/java_app.git"
                    )
                }
            }
        }

/*        stage('unit test maven'){

        when { expression {  params.action == 'create' } }

            steps{

                script {

                    mvnTest()
                }
            }
        }

        stage('integration test maven'){

            when { expression {  params.action == 'create' } }

            steps{

                script {

                    mvnIntegrationTest()
                }
            }
        }

        stage('Static code analysis: Sonarqube'){

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    
                    def SonarqubecredentialsId = 'sonarqube-api'
                    staticCodeAnalysis(SonarqubecredentialsId)
                }
            }
        }

        stage('Quality Gate Status: Sonarqube'){

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    
                    def SonarqubecredentialsId = 'sonarqube-api'
                    qualityGateStatus(SonarqubecredentialsId)
                }
            }
        }

        stage('Maven Build: Maven'){

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    
                   mvnBuild()

                }
            }
        }

        stage('Docker Image Build: ECR'){

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    
                   ecrBuild("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}" )

                }
            }
        }

        stage('Docker Image Scan: Trivy'){

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    
                   ecrImageScan("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}" )

                }
            }
        }

        stage('Docker Image Push: ECR'){

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    sh 'echo hello'
                   ecrImagePush("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}" )

                }
            }
        }

         stage('Docker Image Cleanup: ECR'){

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    
                   ecrImageCleanup("${params.aws_account_id}", "${params.region}", "${params.ecr_repo_name}" )

                }
            }
        }

*/

        stage('Create EKS cluster: Terraform'){
            

            when { expression {  params.action == 'create' } }

            steps{

                script {
                    
                   dir('eks_module') {
                        sh """
                            terraform init
                            terraform plan -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' --var-file=./config/terraform.tfvars
                            terraform apply -var 'access_key=$ACCESS_KEY' -var 'secret_key=$SECRET_KEY' --var-file=./config/terraform.tfvars --auto-approve
                        """
                    }
                }
            }
        }

        stage('Connect to EKS'){
            
            when { expression {  params.action == 'create' } }

            steps{

                script {
        
                        sh """
                            aws configure set aws_access_key_id $ACCESS_KEY
                            aws configure set aws_secret_access_key $SECRET_KEY
                            aws configure set region ${params.region}
                            aws eks --region ${params.region} update-kubeconfig --name ${params.cluster}
                        """
                    
                }
            }
        }

        stage('Deployment on EKS Cluster'){
            when { expression {  params.action == 'create' } }
            steps{
                script{
                  
                  def apply = false

                  try{
                    input message: 'please confirm to deploy on eks', ok: 'Ready to apply the config ?'
                    apply = true
                  }catch(err){
                    apply = false
                    currentBuild.result  = 'UNSTABLE'
                  }
                  if(apply){

                    sh """
                      echo hello
                      who
                      kubectl apply -f deplyment.yaml
                    """
                  }
                }
            }
        } 

    }
}